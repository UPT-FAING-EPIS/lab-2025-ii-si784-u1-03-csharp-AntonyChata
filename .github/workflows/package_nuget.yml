name: Test, SonarCloud & Publish NuGet

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]          # publica paquete al crear tag vX.Y.Z
  pull_request:

permissions:
  contents: read
  packages: write            # publicar en GitHub Packages
  pull-requests: write       # anotar resultados de pruebas

jobs:
  build-test-analyze-pack:
    runs-on: ubuntu-latest

    env:
      DOTNET_VERSION: '8.0.x'
      # Ajusta estas dos o define como Variables del repo
      SONAR_ORGANIZATION: ${{ vars.SONAR_ORGANIZATION }}
      SONAR_PROJECT_KEY:  ${{ vars.SONAR_PROJECT_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0     # Recomendado para Sonar (historial completo)

      - name: Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore

      # ---------- SonarCloud + Tests ----------
      - name: Install dotnet-sonarscanner & coverlet.console
        run: |
          dotnet tool install -g dotnet-sonarscanner
          dotnet tool install -g coverlet.console
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

      - name: SonarCloud - Begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin \
            /k:"${{ env.SONAR_PROJECT_KEY }}" \
            /o:"${{ env.SONAR_ORGANIZATION }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login="${SONAR_TOKEN}" \
            /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" \
            /d:sonar.coverage.exclusions="**/*.Tests.cs,**/*.Tests/*.cs,**/bin/**,**/obj/**"

      - name: Test (TRX + Coverage)
        run: |
          mkdir -p TestResults
          # Ejecuta todos los proyectos *Tests*. Ajusta si usas otro patr√≥n.
          for proj in $(git ls-files '*Tests.csproj'); do
            dotnet test "$proj" \
              --configuration Release \
              --no-build \
              --logger "trx;LogFileName=$(basename $proj).trx" \
              --results-directory TestResults \
              /p:CollectCoverage=true \
              /p:CoverletOutput=TestResults/$(basename $proj)-coverage \
              /p:CoverletOutputFormat=opencover
          done

      - name: SonarCloud - End
        if: always()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet-sonarscanner end /d:sonar.login="${SONAR_TOKEN}"

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-and-coverage
          path: |
            TestResults/*.trx
            **/TestResults/**/coverage.opencover.xml
          if-no-files-found: ignore
          retention-days: 7

      - name: Publish Unit Test Summary to PR
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: .NET Tests
          path: TestResults/*.trx
          reporter: dotnet-trx
          fail-on-error: false

      # ---------- Pack NuGet (Bank.Domain) ----------
      - name: Pack Bank.Domain
        run: |
          dotnet pack Bank/Bank.Domain/Bank.Domain.csproj \
            -c Release -o out /p:IncludeSymbols=true /p:SymbolPackageFormat=snupkg

      - name: Upload .nupkg artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: out/*.*nupkg
          retention-days: 7

      # ---------- Publish to GitHub Packages ----------
      - name: Configure GitHub Packages source
        run: |
          dotnet nuget remove source github || true
          dotnet nuget add source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --name "github" \
            --username "${{ github.repository_owner }}" \
            --password "${{ secrets.GITHUB_TOKEN }}" \
            --store-password-in-clear-text

      - name: Push .nupkg to GitHub Packages
        if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          dotnet nuget push "out/*.nupkg" --source "github" --skip-duplicate
          dotnet nuget push "out/*.snupkg" --source "github" --skip-duplicate
